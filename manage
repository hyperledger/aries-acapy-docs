#!/bin/bash

# getDockerHost; for details refer to https://github.com/bcgov/DITP-DevOps/tree/main/code/snippets#getdockerhost
. /dev/stdin <<<"$(cat <(curl -s --raw https://raw.githubusercontent.com/bcgov/DITP-DevOps/main/code/snippets/getDockerHost))"
export DOCKERHOST=$(getDockerHost)
export MSYS_NO_PATHCONV=1
set -e

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------

usage() {
    cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build -   Build the docker images for the project. You need to do this first, since the builds
            require a combination of Docker images.

  up    -   Creates the application container from the built images and starts the services based
            on the docker-compose.yml file.
  
  start -   Same as up

  logs  -   Display the logs from the docker compose run (ctrl-c to exit).

  stop  -   Stops the services. This is a non-destructive process. The volumes and containers are
            not deleted so they will be reused the next time you run start.

EOF
    exit 1
}

configureEnvironment() {
    unset composeOptions
    export composeOptions="-f ./docker/docker-compose.yml"
}

build() {
    # Build all containers in the docker-compose file
    echo -e "\nBuilding containers ..."
    echo docker build
    docker build -f ./docker/Dockerfile -t acapy-docs .
}

# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$1
shift || true

case "$COMMAND" in
start | up)
    configureEnvironment
    docker-compose ${composeOptions} up -d
    docker-compose ${composeOptions} logs
    ;;
logs)
    configureEnvironment
    docker-compose ${composeOptions} logs
    ;;
stop)
    configureEnvironment
    docker-compose ${composeOptions} stop
    ;;
build)
    build
    ;;
*)
    usage
    ;;
esac

popd >/dev/null
